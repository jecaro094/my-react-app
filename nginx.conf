events {}

http {
    server {
      listen 80;

      location / {
          # Proxy to the front service
          proxy_pass http://front:3000;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
      }

      location /api/ {
          # Proxy to the back service
          proxy_pass http://host.docker.internal:8080;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;

          # CORS headers
          add_header 'Access-Control-Allow-Origin' '*' always;
          add_header 'Access-Control-Allow-Credentials' 'true' always;
          add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
          add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept' always;

          # Handle OPTIONS method
          if ($request_method = 'OPTIONS') {
              add_header 'Access-Control-Allow-Origin' '*';
              add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
              add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept';
              add_header 'Access-Control-Allow-Credentials' 'true';
              add_header 'Content-Length' '0';
              add_header 'Content-Type' 'text/plain; charset=UTF-8';
              return 204;
          }
      }
  }
}